name: Build, Push, and Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Create .env.production file
      run: |
        echo "${{ secrets.ENV_PROD }}" > .env.production

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push with Docker Compose
      env:
        DOCKER_REPO: ${{ secrets.DOCKERHUB_USERNAME }}
        GITHUB_SHA: ${{ github.sha }}
      run: |
        # Build all services
        docker compose build

        # Tag and push each service
        docker compose config --format json | jq -r '.services | to_entries[] | .key as $service | .value.image | select(. != null) | [$service, .] | @tsv' | while read service image; do
          # Tag with SHA
          docker tag $image ${DOCKER_REPO}/${service}:${GITHUB_SHA}
          docker push ${DOCKER_REPO}/${service}:${GITHUB_SHA}
          
          # Tag as latest
          docker tag $image ${DOCKER_REPO}/${service}:latest
          docker push ${DOCKER_REPO}/${service}:latest
        done

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Create .env.production file
      run: |
        echo "${{ secrets.ENV_PROD }}" > .env.production

    - name: Copy files to EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        HOST: ${{ secrets.EC2_HOST }}
        USER: ubuntu
      run: |
        echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
        scp -i private_key -o StrictHostKeyChecking=no docker-compose.yml ${USER}@${HOST}:~/docker-compose.yml
        scp -i private_key -o StrictHostKeyChecking=no .env.production ${USER}@${HOST}:~/.env.production

    - name: Deploy to EC2 with Docker Compose
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        HOST: ${{ secrets.EC2_HOST }}
        USER: ubuntu
        DOCKER_REPO: ${{ secrets.DOCKERHUB_USERNAME }}
        GITHUB_SHA: ${{ github.sha }}
      run: |
        ssh -i private_key -o StrictHostKeyChecking=no ${USER}@${HOST} "
          export DOCKER_REPO=${DOCKER_REPO}
          export GITHUB_SHA=${GITHUB_SHA}
          docker-compose pull
          docker-compose up -d
          docker system prune -af
        "